// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	GetFaceRecognitionConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*FaceRecognitionConfig, error)
	UpdateFaceRecognitionConfig(ctx context.Context, in *FaceRecognitionConfig, opts ...grpc.CallOption) (*Ack, error)
	RegisterFaceRecognition(ctx context.Context, in *FaceRecognitionRegistration, opts ...grpc.CallOption) (*Ack, error)
	GetS3GatewayConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*S3GatewayConfig, error)
	UpdateS3GatewayConfig(ctx context.Context, in *S3GatewayConfig, opts ...grpc.CallOption) (*Ack, error)
	RegisterS3Gateway(ctx context.Context, in *S3GatewayRegistration, opts ...grpc.CallOption) (*Ack, error)
	GetAuthenticationConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*AuthenticationConfig, error)
	UpdateAuthenticationDatabaseConfig(ctx context.Context, in *DatabaseConfig, opts ...grpc.CallOption) (*Ack, error)
	RegisterAuthentication(ctx context.Context, in *AuthenticationRegistration, opts ...grpc.CallOption) (*Ack, error)
	GetAuthenticationClientConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*AuthenticationClientConfig, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetFaceRecognitionConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*FaceRecognitionConfig, error) {
	out := new(FaceRecognitionConfig)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/GetFaceRecognitionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateFaceRecognitionConfig(ctx context.Context, in *FaceRecognitionConfig, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/UpdateFaceRecognitionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RegisterFaceRecognition(ctx context.Context, in *FaceRecognitionRegistration, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/RegisterFaceRecognition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetS3GatewayConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*S3GatewayConfig, error) {
	out := new(S3GatewayConfig)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/GetS3GatewayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateS3GatewayConfig(ctx context.Context, in *S3GatewayConfig, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/UpdateS3GatewayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RegisterS3Gateway(ctx context.Context, in *S3GatewayRegistration, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/RegisterS3Gateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAuthenticationConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*AuthenticationConfig, error) {
	out := new(AuthenticationConfig)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/GetAuthenticationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAuthenticationDatabaseConfig(ctx context.Context, in *DatabaseConfig, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/UpdateAuthenticationDatabaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RegisterAuthentication(ctx context.Context, in *AuthenticationRegistration, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/RegisterAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAuthenticationClientConfig(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*AuthenticationClientConfig, error) {
	out := new(AuthenticationClientConfig)
	err := c.cc.Invoke(ctx, "/aveplen.config.Config/GetAuthenticationClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	GetFaceRecognitionConfig(context.Context, *Ack) (*FaceRecognitionConfig, error)
	UpdateFaceRecognitionConfig(context.Context, *FaceRecognitionConfig) (*Ack, error)
	RegisterFaceRecognition(context.Context, *FaceRecognitionRegistration) (*Ack, error)
	GetS3GatewayConfig(context.Context, *Ack) (*S3GatewayConfig, error)
	UpdateS3GatewayConfig(context.Context, *S3GatewayConfig) (*Ack, error)
	RegisterS3Gateway(context.Context, *S3GatewayRegistration) (*Ack, error)
	GetAuthenticationConfig(context.Context, *Ack) (*AuthenticationConfig, error)
	UpdateAuthenticationDatabaseConfig(context.Context, *DatabaseConfig) (*Ack, error)
	RegisterAuthentication(context.Context, *AuthenticationRegistration) (*Ack, error)
	GetAuthenticationClientConfig(context.Context, *Ack) (*AuthenticationClientConfig, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) GetFaceRecognitionConfig(context.Context, *Ack) (*FaceRecognitionConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFaceRecognitionConfig not implemented")
}
func (UnimplementedConfigServer) UpdateFaceRecognitionConfig(context.Context, *FaceRecognitionConfig) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFaceRecognitionConfig not implemented")
}
func (UnimplementedConfigServer) RegisterFaceRecognition(context.Context, *FaceRecognitionRegistration) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFaceRecognition not implemented")
}
func (UnimplementedConfigServer) GetS3GatewayConfig(context.Context, *Ack) (*S3GatewayConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3GatewayConfig not implemented")
}
func (UnimplementedConfigServer) UpdateS3GatewayConfig(context.Context, *S3GatewayConfig) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateS3GatewayConfig not implemented")
}
func (UnimplementedConfigServer) RegisterS3Gateway(context.Context, *S3GatewayRegistration) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterS3Gateway not implemented")
}
func (UnimplementedConfigServer) GetAuthenticationConfig(context.Context, *Ack) (*AuthenticationConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationConfig not implemented")
}
func (UnimplementedConfigServer) UpdateAuthenticationDatabaseConfig(context.Context, *DatabaseConfig) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthenticationDatabaseConfig not implemented")
}
func (UnimplementedConfigServer) RegisterAuthentication(context.Context, *AuthenticationRegistration) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthentication not implemented")
}
func (UnimplementedConfigServer) GetAuthenticationClientConfig(context.Context, *Ack) (*AuthenticationClientConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationClientConfig not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_GetFaceRecognitionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetFaceRecognitionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/GetFaceRecognitionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetFaceRecognitionConfig(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateFaceRecognitionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceRecognitionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateFaceRecognitionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/UpdateFaceRecognitionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateFaceRecognitionConfig(ctx, req.(*FaceRecognitionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RegisterFaceRecognition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceRecognitionRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RegisterFaceRecognition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/RegisterFaceRecognition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RegisterFaceRecognition(ctx, req.(*FaceRecognitionRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetS3GatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetS3GatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/GetS3GatewayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetS3GatewayConfig(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateS3GatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(S3GatewayConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateS3GatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/UpdateS3GatewayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateS3GatewayConfig(ctx, req.(*S3GatewayConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RegisterS3Gateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(S3GatewayRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RegisterS3Gateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/RegisterS3Gateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RegisterS3Gateway(ctx, req.(*S3GatewayRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAuthenticationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAuthenticationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/GetAuthenticationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAuthenticationConfig(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAuthenticationDatabaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAuthenticationDatabaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/UpdateAuthenticationDatabaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAuthenticationDatabaseConfig(ctx, req.(*DatabaseConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RegisterAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RegisterAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/RegisterAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RegisterAuthentication(ctx, req.(*AuthenticationRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAuthenticationClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAuthenticationClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.config.Config/GetAuthenticationClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAuthenticationClientConfig(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aveplen.config.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFaceRecognitionConfig",
			Handler:    _Config_GetFaceRecognitionConfig_Handler,
		},
		{
			MethodName: "UpdateFaceRecognitionConfig",
			Handler:    _Config_UpdateFaceRecognitionConfig_Handler,
		},
		{
			MethodName: "RegisterFaceRecognition",
			Handler:    _Config_RegisterFaceRecognition_Handler,
		},
		{
			MethodName: "GetS3GatewayConfig",
			Handler:    _Config_GetS3GatewayConfig_Handler,
		},
		{
			MethodName: "UpdateS3GatewayConfig",
			Handler:    _Config_UpdateS3GatewayConfig_Handler,
		},
		{
			MethodName: "RegisterS3Gateway",
			Handler:    _Config_RegisterS3Gateway_Handler,
		},
		{
			MethodName: "GetAuthenticationConfig",
			Handler:    _Config_GetAuthenticationConfig_Handler,
		},
		{
			MethodName: "UpdateAuthenticationDatabaseConfig",
			Handler:    _Config_UpdateAuthenticationDatabaseConfig_Handler,
		},
		{
			MethodName: "RegisterAuthentication",
			Handler:    _Config_RegisterAuthentication_Handler,
		},
		{
			MethodName: "GetAuthenticationClientConfig",
			Handler:    _Config_GetAuthenticationClientConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
